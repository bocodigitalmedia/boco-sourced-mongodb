// Generated by CoffeeScript 1.6.3
(function() {
  var MongoAdapter, MongoJS, Sourced;

  Sourced = require('boco-sourced');

  MongoJS = require('mongojs');

  module.exports = MongoAdapter = (function() {
    function MongoAdapter(config) {
      if (config == null) {
        config = {};
      }
      this.connectionString = config.connectionString;
      this.revisionsCollectionName = config.revisionsCollectionName;
    }

    MongoAdapter.prototype.getDatabase = function() {
      if (this.db != null) {
        return this.db;
      }
      return this.db = MongoJS(this.connectionString);
    };

    MongoAdapter.prototype.getRevisionsCollection = function() {
      if (this.revisionsCollection != null) {
        return this.revisionsCollection;
      }
      return this.revisionsCollection = this.getDatabase().collection(this.revisionsCollectionName);
    };

    MongoAdapter.prototype.setup = function(callback) {
      var collection, idx;
      collection = this.getRevisionsCollection();
      idx = {
        resourceType: 1,
        resourceId: 1,
        resourceVersion: 1
      };
      return collection.ensureIndex(idx, {
        unique: true
      }, function(error) {
        return callback(error);
      });
    };

    MongoAdapter.prototype.storeRevision = function(revision, callback) {
      var collection;
      collection = this.getRevisionsCollection();
      return collection.insert(revision, function(error) {
        if (error == null) {
          return callback();
        }
        if (error.code !== 11000) {
          return callback(error);
        }
        return callback(new Sourced.RevisionConflict());
      });
    };

    MongoAdapter.prototype.findRevisions = function(resourceType, resourceId, callback) {
      var collection, query;
      collection = this.getRevisionsCollection();
      query = {
        resourceType: resourceType,
        resourceId: resourceId
      };
      return collection.find(query).toArray(function(error, results) {
        return callback(error, results);
      });
    };

    return MongoAdapter;

  })();

}).call(this);

/*
//@ sourceMappingURL=MongoAdapter.map
*/
